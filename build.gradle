plugins {
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    id "org.owasp.dependencycheck" version "7.1.0.1"
    id "org.sonarqube" version "3.3"
}

group 'com.docutools'
version = '1.4.0-alpha.9'

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/dds-gmbh/poipath")
        credentials {
            username = project.findProperty("gpr.gh.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.gh.token") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

def apachePOIVersion = '5.2.2'

dependencies {
    implementation('commons-beanutils:commons-beanutils:1.9.4')

    implementation("org.apache.poi:poi:$apachePOIVersion")
    implementation("org.apache.poi:poi-ooxml:$apachePOIVersion")
    implementation("org.apache.poi:poi-ooxml-lite:$apachePOIVersion")

    implementation("com.google.code.gson:gson:2.9.0")
    implementation("org.apache.tika:tika-core:2.4.0")

    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'

    implementation 'com.codepoetics:protonpack:1.16'
    implementation("com.google.guava:guava:31.1-jre")

    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation("org.hamcrest:hamcrest:2.2")
    testImplementation("com.docutools:poipath:1.1.6")
}

tasks.withType(Checkstyle) {
    ignoreFailures = false
    maxWarnings = 0 // Maximum number of warnings allowed
    reports {
        html.destination rootProject.file("build/reports/checkstyle.html")
    }
}

dependencyCheck {
    format = 'ALL'
    junitFailOnCVSS = 6.0
    failBuildOnCVSS = 6.0
    suppressionFile = 'config/dependency-check/suppression.xml'
}

java {
    withSourcesJar()
    withJavadocJar()
}
javadoc {
    failOnError = false
}

test {
    useJUnitPlatform()
}

task automatedTests(type: Test) {
    environment 'DT_JT_RR_PLACEHOLDER_MAPPINGS', 'src/test/resources/mappings.txt'
    useJUnitPlatform{
        includeTags "automated"
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/DDS-GmbH/jocument")
            credentials {
                username = project.findProperty("gpr.gh.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.gh.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "jocument"
        property "sonar.organization", "docu-tools"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.verbose", "true"
        property "sonar.sources", "src/main/java/"
        property "sonar.language", "java"
        property "sonar.java.binaries", "."
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoAutomatedTestReport/jacocoAutomatedTestReport.xml"
        property "sonar.qualitygate.wait", "true"
        property "sonar.qualitygate.timeout", "180"
    }
}

task jacocoAutomatedTestReport(type: JacocoReport) {
    sourceSets sourceSets.main
    executionData automatedTests
    reports {
        xml.getRequired().set(true)
    }
}
